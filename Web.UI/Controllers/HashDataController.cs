using Microsoft.AspNetCore.Mvc;
using Project.Database.Entities;
using Project.Database.Repository.Abstract;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Web.UI.Library.Filters;
using Web.UI.Models;

namespace Web.UI.Controllers
{
    [TypeFilter(typeof(UserAuth))]
    public class HashDataController : Controller
    {
        private ILogicService logic;
        public HashDataController(ILogicService _logic)
        {
            logic = _logic;
        }
        public IActionResult Index()
        {
            return View();

        }
        [HttpPost]
        public JsonResult GetAllData(DatatablesModel.DataTablesRequestParameter dataTablesRequestParameter)
        {
            DatatablesModel.DataTablesResponseParameter<Hash> dataTablesReponseParameter = new DatatablesModel.DataTablesResponseParameter<Hash>();
            dataTablesReponseParameter.recordsTotal = logic.Hashes.Count();
            var hashes= logic.Hashes.GetAll(dataTablesRequestParameter.start,dataTablesRequestParameter.length).AsEnumerable();
            List<Hash> list = hashes.ToList();
            dataTablesReponseParameter.draw = dataTablesRequestParameter.draw;
            dataTablesReponseParameter.recordsFiltered = dataTablesReponseParameter.recordsTotal;
            dataTablesReponseParameter.data = list;
            return Json(dataTablesReponseParameter);

        }
        [HttpPost]
        public async Task<JsonResult> UpdateData()
        {
            bool hasError = false;
            string message = "";
            try
            {
                logic.Hashes.DeleteAll();
                var data = await logic.Hashes.UpdateAsyncHash();
            }
            catch (Exception ex)
            {

                hasError = true;
                message = ex.Message;
            }

            return Json(new { hasError, message });

        }
        [HttpPost]
        public JsonResult DeleteHash(int ID)
        {
            bool hasError = false;
            string message = "";
            try
            {
                 logic.Hashes.DeleteById(ID);
            }
            catch (Exception ex)
            {
                hasError = true;
                message = ex.Message;
            }
            return Json(new { hasError, message });
        }
       
    }
}
