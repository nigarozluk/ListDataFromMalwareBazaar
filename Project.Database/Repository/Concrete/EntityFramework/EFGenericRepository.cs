using Microsoft.EntityFrameworkCore;
using Project.Database.Entities;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Text;
using System.Threading.Tasks;

namespace Project.Database.Repository.Concrete.EntityFramework
{
  public  class EFGenericRepository<T> : Abstract.IGenericRepository<T> where T : class, IEntity
    {
        protected readonly DbContext context;
        public EFGenericRepository(DbContext ctx)
        {
            context = ctx;
        }

        public int Count(Expression<Func<T, bool>> predicate = null)
        {
            int total = context.Set<T>().Count();
            return total;
        }

        public void DeleteAll()
        {
            var entity = context.Set<T>().ToList();
            context.RemoveRange(entity);
            Save();
        }

        public void DeleteById(int id)
        {
            var entity = context.Set<T>().FirstOrDefault(k => k.Id == id);
            context.Remove(entity);
            Save();
        }


        public IEnumerable<T> GetAll(int start,int lenght)
        {
            IEnumerable<T> entity = context.Set<T>().ToList();
            if (entity.Count()>0 )
            {
                entity = entity.ToList().Skip(start).Take(lenght);
            }
            return entity;
        }

        public T GetById(int id)
        {
            var entity = context.Set<T>().FirstOrDefault(x => x.Id == id);
            return entity;
        }

        public void Save()
        {
            context.SaveChanges();
        }
    }
}
