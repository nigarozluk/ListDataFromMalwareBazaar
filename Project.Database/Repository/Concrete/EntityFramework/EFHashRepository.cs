using Nancy.Json;
using Project.Database.DAL;
using Project.Database.Entities;
using Project.Database.Repository.Abstract;
using Project.Database.ViewModel;
using RestSharp;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net.Http;
using System.Text;
using System.Threading.Tasks;

namespace Project.Database.Repository.Concrete.EntityFramework
{
    public class EFHashRepository : EFGenericRepository<Hash>, IHashRepository
    {
        static readonly HttpClient client = new HttpClient();
        private readonly ProjectContext projectContext;
        public EFHashRepository(ProjectContext context) : base(context)
        {
            projectContext = context;
        }

        public async Task<IEnumerable<Hash>> UpdateAsyncHash()
        {
          
            HttpResponseMessage data = await client.GetAsync("https://bazaar.abuse.ch/export/txt/md5/recent/");
            data.EnsureSuccessStatusCode();
            string responseBody = await data.Content.ReadAsStringAsync();
            string[] md5HashList = responseBody.Split("\r\n");

            foreach (var item in md5HashList)
            {

                if (!item.Contains("#") && item!="")
                {
                    RestClient client = new RestClient("https://mb-api.abuse.ch/api/v1/");
                    RestRequest request = new RestRequest();
                    request.AddParameter("query", "get_info");
                    request.AddParameter("hash", item);
                    var response = await client.PostAsync<HashPostViewModel>(request);
                    var hashDetail = new Hash
                    {
                        first_seen = Convert.ToDateTime(response.data[0].first_seen),
                        md5_hash = response.data[0].md5_hash,
                        sha1_hash = response.data[0].sha1_hash,
                        sha256_hash = response.data[0].sha256_hash,
                        signature = response.data[0].Signature ?? "null",
                        tags = response.data[0].tags != null ? string.Join(" ", response.data[0].tags) : "null",

                    };
                    projectContext.Hashes.Add(hashDetail);
                    projectContext.SaveChanges();
                }

            }
            

            IEnumerable<Hash> hashdata = projectContext.Hashes.ToList();
            return hashdata;
        }
    }
}
